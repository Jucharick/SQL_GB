/*
Оконная функция в SQL - функция, которая работает с
выделенным набором строк (окном, партицией) и выполняет
вычисление для этого набора строк в отдельном столбце.

Партиции (окна из набора строк) - это набор строк, указанный
для оконной функции по одному из столбцов или группе
столбцов таблицы. Партиции для каждой оконной функции в
запросе могут быть разделены по различным колонкам
таблицы.

Агрегатные функции (агрегации) — это функции, которые
вычисляются от группы значений и объединяют их в одно
результирующее.

Функции смещения – это функции, которые позволяют
перемещаться и обращаться к разным строкам в окне,
относительно текущей строки, а также обращаться к значениям
в начале или в конце окна.

Аналитические функции — это функции которые возвращают
информацию о распределении данных и используются для
статистического анализа.

Предикат в SQL это:
в широком смысле, — любое выражение, результатом которого
являются значения булевого типа — TRUE, FALSE, а так же
UNKNOWN
*/



use gb_db;

DROP TABLE staff;;

-- Создание таблицы
CREATE TABLE IF NOT EXISTS staff
(
id INT PRIMARY KEY,
first_name VARCHAR(30),
post VARCHAR(30),
discipline VARCHAR(30),
salary INT
);;

-- Заполнение таблицы данными
INSERT staff (id, first_name, post, discipline, salary)
VALUES
(100,'Антон', 'Преподаватель', 'Программирование', 50),
(101,'Василий', 'Преподаватель', 'Программирование', 60),
(103,'Александр', 'Ассистент', 'Программирование', 25),
(104,'Владимир', 'Профессор', 'Математика', 120),
(105,'Иван', 'Профессор', 'Математика', 120),
(106,'Михаил', 'Доцент', 'Физика', 70),
(107, 'Анна', 'Доцент', 'Физика', 70),
(108, 'Вероника', 'Доцент', 'ИКТ', 30),
(109,'Григорий', 'Преподаватель', 'ИКТ', 25),
(110,'Георгий', 'Ассистент', 'Программирование', 30);;


SELECT * FROM staff;;


SELECT first_name, 
	   post,
	   salary,
	   sum(salary) OVER() AS Total -- суммируется по всей таблице
FROM staff;;

SELECT first_name, 
	   post,
	   salary,
	   sum(salary) OVER(PARTITION BY post) AS Total -- суммируется внутри блока post
FROM staff;;

-- PARTITION BY - группировка

SELECT first_name, 
	   post,
	   salary,
	   sum(salary) OVER(PARTITION BY post ORDER BY salary) AS Total -- суммируется внутри блока post c предыдущим и c последующим значением
FROM staff;;


/*
ROWS и RANGE

UNBOUNDED PRECEDING — указывает, что окно
начинается с первой строки группы;

UNBOUNDED FOLLOWING – с помощью данной
инструкции можно указать, что окно заканчивается на
последней строке группы;

CURRENT ROW – инструкция указывает, что окно
начинается или заканчивается на текущей строке;

BETWEEN «граница окна» AND «граница окна» —
указывает нижнюю и верхнюю границу окна;

«Значение» PRECEDING – определяет число строк
перед текущей строкой (не допускается в
предложении RANGE).;

«Значение» FOLLOWING — определяет число строк
после текущей строки (не допускается в предложении
RANGE).
*/
 

SELECT first_name, 
	   post,
	   salary,
	   sum(salary) OVER(PARTITION BY post ORDER BY salary ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS Total -- суммируется внутри блока post c последующим значением
FROM staff;;


/*
Агрегатные функции

SUM – возвращает сумму значений в столбце;
COUNT — вычисляет количество значений в столбце (значения
NULL не учитываются);
AVG — определяет среднее значение в столбце;
MAX — определяет максимальное значение в столбце;
MIN — определяет минимальное значение в столбце.

Ранжирующие функции

ROW_NUMBER – функция возвращает номер строки и
используется для нумерации;
RANK — функция возвращает ранг каждой строки. В данном
случае значения уже анализируются и, в случае нахождения
одинаковых, возвращает одинаковый ранг с пропуском
следующего значения;
DENSE_RANK — функция возвращает ранг каждой строки. Но в
отличие от функции RANK, она для одинаковых значений
возвращает ранг, не пропуская следующий;
NTILE – это функция, которая позволяет определить к какой
группе относится текущая строка. Количество групп задается в
скобках.

Функции смещения

LAG или LEAD – функция LAG обращается к данным из
предыдущей строки окна, а LEAD к данным из следующей строки.
Функцию можно использовать для того, чтобы сравнивать
текущее значение строки с предыдущим или следующим. Имеет
три параметра: столбец, значение которого необходимо вернуть,
количество строк для смещения (по умолчанию 1), значение,
которое необходимо вернуть если после смещения возвращается
значение NULL;
FIRST_VALUE или LAST_VALUE — с помощью функции можно
получить первое и последнее значение в окне. В качестве
параметра принимает столбец, значение которого необходимо
вернуть.
*/



/*
Представление (VIEW) —
объект базы данных, являющийся результатом выполнения запроса к базе данных, определенного
с помощью оператора SELECT, в момент обращения к представлению. Представления иногда
называют «виртуальными таблицами».
*/

CREATE OR REPLACE VIEW count_teacher AS
SELECT
	   discipline, 
	   count(first_name) AS res
FROM staff
GROUP BY discipline
ORDER BY count(first_name) DESC;
-- "OR REPLACE" заменяет представление, если оно существует

SELECT * FROM count_teacher;

/*
Операции с представлениями

DROP :  представление/виртуальную таблицу можно удалить с помощью команды DROP VIEW
Объединение: мы также можем создать представление, объединив несколько таблиц. Это
соединение будет извлекать совпадающие записи из обеих таблиц. 

Создание ( CREATE VIEW)

Изменение существующего представления - ALTER VIEW
*/


/*
Преимущества использования представлений:

1. Дает возможность гибкой настройки прав доступа к данным за счет того, что права даются не
на таблицу, а на представление. Это очень удобно в случае если пользователю нужно дать
права на отдельные строки таблицы или возможность получения не самих данных, а
результата каких-то действий над ними.

2. Позволяет разделить логику хранения данных и программного обеспечения. Можно менять
структуру данных, не затрагивая программный код, нужно лишь создать представления,
аналогичные таблицам, к которым раньше обращались приложения. Это очень удобно когда
нет возможности изменить программный код или к одной базе данных обращаются несколько
приложений с различными требованиями к структуре данных.

3. Удобство в использовании за счет автоматического выполнения таких действий как доступ к
определенной части строк и/или столбцов, получение данных из нескольких таблиц и их
преобразование с помощью различных функций.
*/
















